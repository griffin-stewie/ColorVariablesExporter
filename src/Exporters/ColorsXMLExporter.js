var Document = require('sketch/dom').Document

export class ColorsXMLExporter {
    constructor(swatches, colorSpace) {
        this.swatches = swatches;
        this.colorSpace = colorSpace
    }

    exportAsFile(url) {
        const manager = NSFileManager.defaultManager()

        let colorTags = new Array()
        this.swatches.forEach(swatch => {
            const wrapper = new SwatchWrapper(swatch, this.colorSpace)
            colorTags.push(wrapper.colorTag())
            // log(`🍣: ${swatch.name} => ${swatch.color}, ${this.colorSpace}, ${wrapper.contentsJSONString()}`)
        });

        const xml = this.contentsXMLString(colorTags)
        const path = url.path()
        const fileString = NSString.stringWithString(xml)
        fileString.writeToFile_atomically_encoding_error(
            `${path}/colors.xml`,
            true,
            NSUTF8StringEncoding,
            null
        )
    }

    contentsXMLString(colorTags) {
        const colorStrings = colorTags
            .map(a => `    ${a}`)
            .join("\n")
        return `
        <?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- generated by github.com/griffin-stewie/ColorVariablesExporter -->
${colorStrings}
</resources>
        `.trim()
    }
}

class SwatchWrapper {
    constructor(swatch, colorSpace) {
        this.swatch = swatch;
        this.colorSpace = colorSpace
    }

    color() {
        return this.swatch.sketchObject.color()
    }

    colorTag() {
        return `<color name="${this.swatch.name.trim()}">${this.colorComponents()}</color>`
    }

    colorComponents() {
        const color = this.swatch.color.toUpperCase()
        // "#rrggbbaa" -> "#aarrggbb"
        return `#${color.slice(7, color.length)}${color.slice(1, 7)}`
    }
}