import { SwatchWrapper } from '../SwatchWrapper'
import * as changeCase from "change-case";
import * as ui from '../UI';

export class SwiftUIColorExtensionExporter {
  constructor(swatches, colorSpace) {
    this.swatches = swatches;
    this.colorSpace = colorSpace
  }

  exportAsFile() {
    const destinationURL = ui.showSaveFileDialog("Colors.generated.swift")

    if (destinationURL === null) {
      return
    }

    const wrappers = this.swatches.map(swatch => {
      return new SwatchWrapper(swatch, this.colorSpace)
    })

    const code = this.contentsSwiftCodeString(wrappers)
    const fileString = NSString.stringWithString(code)
    fileString.writeToFile_atomically_encoding_error(
      destinationURL.path(),
      true,
      NSUTF8StringEncoding,
      null
    )
  }

  contentsSwiftCodeString(wrappers) {
    const colorStrings = wrappers.map(w => this.toCode(w))
      .map(a => `    ${a}\n`)
      .join("\n")
    return `
// generated by Color Variables Exporter Sketch Plugin

import UIKit

extension UIColor {
${colorStrings}
}
      `.trim()
  }

  toCode(wrapper) {
    return `
    /// ${wrapper.hexRGBColor()} - ${wrapper.alphaValue() * 100}%
    static let ${wrapper.camelCasedName(true)}: UIColor = UIColor(named: "${wrapper.snakeCasedName()}")!
`.trim()
  }
}

